# Minimum CMake version requirement
cmake_minimum_required(VERSION 3.10)

# Project name and language
project(shell)

# Use Conan's toolchain file if available (for dependencies)
# This should be generated by Conan with the `CMakeToolchain` generator
if(EXISTS "${CMAKE_BINARY_DIR}/conan_toolchain.cmake")
  include(${CMAKE_BINARY_DIR}/conan_toolchain.cmake)
endif()

# Add Conan's install directory to CMake's search path
list(APPEND CMAKE_PREFIX_PATH "${CMAKE_BINARY_DIR}/conan_paths.cmake")

# Specify include directories
include_directories(include)
include_directories(tests/src)  # Include test directory if needed

# Specify source files for the shell
set(SOURCES
    src/shell.c
    src/monitor_cmds.c
    src/execute_cmds.c
    src/shell_built_in_cmds.c
)

# Add the monitoring_programm subdirectory
add_subdirectory(monitoring_programm_directory)

# Define the shell executable and set a dependency on monitoring_programm
add_executable(shell ${SOURCES})
add_dependencies(shell monitoring_programm)

# Define the test executable for test_shell
add_executable(test_shell
    tests/test_shell_built_in_cmds.c
    src/shell_built_in_cmds.c
)

# Locate and link Conan-managed dependencies
find_package(cjson REQUIRED CONFIG)
find_package(unity REQUIRED CONFIG)
target_link_libraries(test_shell PRIVATE cjson::cjson unity::unity)

# Add compiler flags for test coverage
target_compile_options(test_shell PRIVATE -fprofile-arcs -ftest-coverage)
target_link_options(test_shell PRIVATE -fprofile-arcs -ftest-coverage)

# Register test_shell with CTest
enable_testing()
add_test(NAME ShellBuiltInCmdTests COMMAND test_shell)

# Copy the test directory into the build directory
file(COPY ${CMAKE_SOURCE_DIR}/tests DESTINATION ${CMAKE_BINARY_DIR}/tests)
